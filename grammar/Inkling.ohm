Inkling {
    Program     =  (Stmt)*
    Stmt        =  newline* SimpleStmt newline+                             -- simpleStmt
                |  newline* IfStmt newline+                                 -- ifBlock
                |  newline* ForLoop newline+                                -- forLoop
                |  newline* FuncDec newline+                                -- funcDec
                |  newline* WhileLoop newline+                              -- whileLoop

    Block       =  "{" Stmt+ "}"
    SimpleStmt  =  Call
                |  VarExp "is" Exp                                          -- assign
                |  id "is" "always" Type Exp                                -- constdec
                |  id "is" Type Exp                                         -- letdec
                |  "exit"                                                   -- break
                |  "display" Exp                                            -- print
                |  "gimme" Exp?                                             -- return
                |  Exp

    Call        =  Call "(" Args ")"
                |  VarExp

    VarExp      =  VarExp "[" Exp "]"                                       -- subscripted
                |  VarExp "." id                                            -- field
                |  id

    FuncDec     =  "function" id "(" Params ")" ReturnType Block            -- function
                |  id "is" "always" "(" Params ")" ReturnType "=>" Block    -- arrowfunction

    Param       =  id "is" Type
    Params      =  ListOf<Param, ",">
    Args        =  ListOf<Exp, ",">
    ReturnType  =  "is" (Type | "void")

    WhileLoop   =  "while" "(" Exp ")" Block
    IfStmt      =  "if" "(" Exp ")" Block
                   ("else if" "(" Exp ")" Block)*
                   ("else" Block)?                                          -- if

    ForLoop     =  "for" id "is" Type "in" Exp Block

    Field       =  id ":" Exp
    Exp         =  Exp "?" Exp ":" Exp                                      -- ternary
                |  Exp0
    Exp0        =  Exp1 "and" Exp                                           -- and
                |  Exp1 "or" Exp                                            -- or
                |  Exp1
    Exp1        =  Exp2 relop Exp2                                          -- relop
                |  Exp2
    Exp2        =  Exp2 addop Exp3                                          -- addop
                |  Exp3
    Exp3        =  Exp3 mulop Exp4                                          -- mulop
                |  Exp4
    Exp4        =  Exp5 "^" Exp4                                            -- pow
                |  Exp5
    Exp5        =  prefixOp Exp6                                            -- prefix
                |  Exp6 postfixOp                                           -- postfix
                |  Exp6
    Exp6        =  "(" Exp ")"                                              -- paren
                |  Call
                |  boollit
                |  txtlit
                |  numlit
                |  id
                |  VarExp
                |  "[" ListOf<Exp, ","> "]"                                 -- list
                |  "{" ListOf<Exp, ","> "}"                                 -- set
                |  "{" ListOf<KeyValue, ","> "}"                            -- dict

    KeyValue    =  Exp ":" Exp
    keyword     =  ( "while " | "if " | "else " | "is " | "true " | "false " | "for " | "do " | "Always " | "display"
                |  "gimme " | "btw: " | "fyi: " | "exit " | "in " | "and " | "or " | "function " | "Num " | "Dict<"
                |  "Bool " | "List<" | "Text " | "Set<")

    Type        =  (Num | Dict | Bool | List | Text | Set)
    Num         =  "Num"
    List        =  "List<" Type ">"
    Set         =  "Set<" Type ">"
    Dict        =  "Dict<" Type "," Type ">"
    Text        =  "Text"
    Bool        =  "Bool"
    id          =  ~keyword letter alnum*
    numlit      =  digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
    boollit     =  "true" | "false"
    txtlit      =  "\"" (~"\\" ~"\"" ~"\n" ~ "\t" any | escape)* "\""
    escape      =  "\\" ("\"" | "\'" | "n" | "t")?                          -- escape
                |  "\\u{" hexDigit+ "}"                                     -- hexDigit
    mulop       =  "*" | "/" | "%"
    addop       =  "+" | "-"
    relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
    prefixOp    =  "--" | "++" | "-" | "!"
    postfixOp   =  "++" |"--"
    newline     =  "\n"+
    space       :=  " " | "\t" | comment
    comment     =  "btw:" ~"fyi:" (~"\n" any)*  "\n"                        -- singleline
                |  "fyi:" (~":xoxo" any)* ":xoxo"                           -- multiline
}
